package main

import (
	"context"
	"database/sql"
	"fmt"
	"os"
	"testing"
	"time"

	_ "github.com/sijms/go-ora/v2"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
)

var (
	db      *sql.DB
	cleanup func()
)

func TestMain(m *testing.M) {
	ctx := context.Background()

	req := testcontainers.ContainerRequest{
		Image:        "gvenzl/oracle-xe:21-slim",
		ExposedPorts: []string{"1521/tcp"},
		Env: map[string]string{
			"ORACLE_PASSWORD": "mysecurepassword",
		},
		WaitingFor: wait.ForLog("DATABASE IS READY TO USE!").WithStartupTimeout(3 * time.Minute),
	}

	oracleC, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{
		ContainerRequest: req,
		Started:          true,
	})
	if err != nil {
		panic(fmt.Sprintf("failed to start Oracle container: %s", err))
	}

	host, err := oracleC.Host(ctx)
	if err != nil {
		panic(err)
	}
	port, err := oracleC.MappedPort(ctx, "1521")
	if err != nil {
		panic(err)
	}

	dsn := fmt.Sprintf("oracle://system:mysecurepassword@%s:%s/XEPDB1", host, port.Port())
	db, err = sql.Open("oracle", dsn)
	if err != nil {
		panic(fmt.Sprintf("failed to connect to Oracle DB: %v", err))
	}

	_, err = db.Exec(`CREATE TABLE users (
		id NUMBER GENERATED BY DEFAULT AS IDENTITY,
		name VARCHAR2(50) NOT NULL ,
		age NUMBER,
		PRIMARY KEY (id)
	)`)
	if err != nil {
		panic(fmt.Sprintf("failed to create table: %v", err))
	}

	_, err = db.Exec(`CREATE OR REPLACE PROCEDURE add_user_proc(p_name IN VARCHAR2, p_age IN NUMBER) AS
						BEGIN
						INSERT INTO users (name, age) VALUES (p_name, p_age);
						END;`)
	if err != nil {
		panic(fmt.Sprintf("failed to create procedure: %v", err))
	}

	cleanup = func() {
		db.Close()
		oracleC.Terminate(ctx)
	}

	code := m.Run()

	cleanup()
	os.Exit(code)
}

func resetTable(t *testing.T) {
	_, err := db.Exec("TRUNCATE TABLE users")
	if err != nil {
		t.Fatalf("failed to reset table: %v", err)
	}
}

func TestInsertUser(t *testing.T) {
	resetTable(t)

	_, err := db.Exec(`INSERT INTO users (name, age) VALUES (:1, :2)`, "Alice", 30)
	if err != nil {
		t.Fatalf("insert failed: %v", err)
	}
}

func TestSelectUser(t *testing.T) {
	resetTable(t)

	_, err := db.Exec(`INSERT INTO users (name, age) VALUES (:1, :2)`, "Bob", 25)
	if err != nil {
		t.Fatalf("insert failed: %v", err)
	}

	var name string
	var age int
	err = db.QueryRow(`SELECT name, age FROM users WHERE name = :1`, "Bob").Scan(&name, &age)
	if err != nil {
		t.Fatalf("select failed: %v", err)
	}

	if name != "Bob" || age != 25 {
		t.Fatalf("unexpected result: name=%s age=%d", name, age)
	}
}

func TestUpdateUser(t *testing.T) {
	resetTable(t)

	_, err := db.Exec(`INSERT INTO users (name, age) VALUES (:1, :2)`, "Charlie", 40)
	if err != nil {
		t.Fatalf("insert failed: %v", err)
	}

	_, err = db.Exec(`UPDATE users SET age = :1 WHERE name = :2`, 45, "Charlie")
	if err != nil {
		t.Fatalf("update failed: %v", err)
	}

	var age int
	err = db.QueryRow(`SELECT age FROM users WHERE name = :1`, "Charlie").Scan(&age)
	if err != nil {
		t.Fatalf("select after update failed: %v", err)
	}

	if age != 45 {
		t.Fatalf("update did not apply correctly, expected 45, got %d", age)
	}
}

func TestDeleteUser(t *testing.T) {
	resetTable(t)

	_, err := db.Exec(`INSERT INTO users (name, age) VALUES (:1, :2)`, "Dave", 28)
	if err != nil {
		t.Fatalf("insert failed: %v", err)
	}

	_, err = db.Exec(`DELETE FROM users WHERE name = :1`, "Dave")
	if err != nil {
		t.Fatalf("delete failed: %v", err)
	}

	var count int
	err = db.QueryRow(`SELECT COUNT(*) FROM users WHERE name = :1`, "Dave").Scan(&count)
	if err != nil {
		t.Fatalf("select after delete failed: %v", err)
	}

	if count != 0 {
		t.Fatalf("user was not deleted, found %d rows", count)
	}
}

func TestAddUserProc(t *testing.T) {
	resetTable(t)

	_, err := db.Exec(`BEGIN add_user_proc(:1, :2); END;`, "Eva", 33)
	if err != nil {
		t.Fatalf("failed to call stored procedure: %v", err)
	}

	var count int
	err = db.QueryRow(`SELECT COUNT(*) FROM users WHERE name = :1 AND age = :2`, "Eva", 33).Scan(&count)
	if err != nil {
		t.Fatalf("failed to query user: %v", err)
	}
	if count != 1 {
		t.Fatalf("expected 1 user, got %d", count)
	}
}

func TestInsertUser_NullName(t *testing.T) {
	resetTable(t)

	_, err := db.Exec(`INSERT INTO users (name, age) VALUES (:1, :2)`, nil, 22)
	if err == nil {
		t.Fatal("expected error when inserting NULL name, got none")
	}
}

func TestSelectUser_NotFound(t *testing.T) {
	resetTable(t)

	var name string
	var age int
	err := db.QueryRow(`SELECT name, age FROM users WHERE name = :1`, "NonExistent").Scan(&name, &age)

	if err == nil {
		t.Fatal("expected no rows error, got none")
	}
	if err != sql.ErrNoRows {
		t.Fatalf("expected sql.ErrNoRows, got: %v", err)
	}
}

func TestUpdateUser_NotFound(t *testing.T) {
	resetTable(t)

	res, err := db.Exec(`UPDATE users SET age = :1 WHERE name = :2`, 99, "GhostUser")
	if err != nil {
		t.Fatalf("update query failed: %v", err)
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		t.Fatalf("failed to get RowsAffected: %v", err)
	}

	if rowsAffected != 0 {
		t.Fatalf("expected 0 rows updated, got %d", rowsAffected)
	}
}

func TestDeleteUser_NotFound(t *testing.T) {
	resetTable(t)

	res, err := db.Exec(`DELETE FROM users WHERE name = :1`, "Nobody")
	if err != nil {
		t.Fatalf("delete query failed: %v", err)
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		t.Fatalf("failed to get RowsAffected: %v", err)
	}

	if rowsAffected != 0 {
		t.Fatalf("expected 0 rows deleted, got %d", rowsAffected)
	}
}
